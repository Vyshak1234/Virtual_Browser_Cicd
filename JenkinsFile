pipeline {
    agent any
    environment {
        SCANNER_HOME = tool 'Sonar-Scanner'
        DOCKER_IMAGE = '####:latest'
        DOCKER_USERNAME = '####'
        DOCKER_PASSWORD = '###'
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Vyshak1234/Vitual-Browser.git'
            }
        }
        stage('OWASP Dependency Checker') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableNodeAudit', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'Sonar-Scanner'
                    withSonarQubeEnv(credentialsId: 'sonar-token') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=proj1_pipeline -Dsonar.projectName=proj1_pipeline"
                    }
                }
            }
        }
        stage('Docker Build & Tag Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'Docker') {
                        dir('/var/lib/jenkins/workspace/proj1_pipeline/.docker/firefox') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }
                    }
                }
            }
        }
        stage('Trivy Docker Scan') {
            steps {
                sh "trivy image -f json ${DOCKER_IMAGE}"
            }
        }
        stage('Docker Login') {
            steps {
                sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
            }
        }
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'Docker') {
                        sh "docker push blitzvyshak/dockerdevopsimage:latest"

                    }
                }
            }
        }
        stage('Deploy'){
            steps {
                sh "docker-compose up -d"
            }
        }
        
    }
}
